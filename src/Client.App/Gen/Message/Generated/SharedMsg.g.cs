// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class SharedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new SharedResolver();

        private SharedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = SharedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class SharedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static SharedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(5)
            {
                { typeof(global::System.Collections.Generic.Dictionary<int, object>), 0 },
                { typeof(global::Shared.Protocol.ErrCode), 1 },
                { typeof(global::Shared.DataModel.MatchData), 2 },
                { typeof(global::Shared.DataModel.User), 3 },
                { typeof(global::Shared.Message.RegisterDummy), 4 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<int, object>();
                case 1: return new MessagePack.Formatters.Shared.Protocol.ErrCodeFormatter();
                case 2: return new MessagePack.Formatters.Shared.DataModel.MatchDataFormatter();
                case 3: return new MessagePack.Formatters.Shared.DataModel.UserFormatter();
                case 4: return new MessagePack.Formatters.Shared.Message.RegisterDummyFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Protocol
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ErrCodeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Protocol.ErrCode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Shared.Protocol.ErrCode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int16)value);
        }

        public global::Shared.Protocol.ErrCode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Shared.Protocol.ErrCode)reader.ReadInt16();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.DataModel
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class MatchDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.DataModel.MatchData>
    {


        public void Serialize(ref MessagePackWriter writer, global::Shared.DataModel.MatchData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, object>>().Serialize(ref writer, value.matchData, options);
        }

        public global::Shared.DataModel.MatchData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __matchData__ = default(global::System.Collections.Generic.Dictionary<int, object>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __matchData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, object>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Shared.DataModel.MatchData();
            ____result.matchData = __matchData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.DataModel.User>
    {


        public void Serialize(ref MessagePackWriter writer, global::Shared.DataModel.User value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.uid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.Write(value.Exp);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.Write(value.Coin);
            writer.Write(value.BlueCoin);
            writer.Write(value.RedCoin);
            writer.Write(value.Strength);
            writer.Write(value.Spirit);
            writer.Write(value.Power);
        }

        public global::Shared.DataModel.User Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __uid__ = default(string);
            var __Name__ = default(string);
            var __Exp__ = default(int);
            var __Coin__ = default(int);
            var __BlueCoin__ = default(int);
            var __RedCoin__ = default(int);
            var __Strength__ = default(int);
            var __Spirit__ = default(int);
            var __Power__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __uid__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Exp__ = reader.ReadInt32();
                        break;
                    case 10:
                        __Coin__ = reader.ReadInt32();
                        break;
                    case 11:
                        __BlueCoin__ = reader.ReadInt32();
                        break;
                    case 12:
                        __RedCoin__ = reader.ReadInt32();
                        break;
                    case 13:
                        __Strength__ = reader.ReadInt32();
                        break;
                    case 14:
                        __Spirit__ = reader.ReadInt32();
                        break;
                    case 15:
                        __Power__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Shared.DataModel.User();
            ____result.uid = __uid__;
            ____result.Name = __Name__;
            ____result.Exp = __Exp__;
            ____result.Coin = __Coin__;
            ____result.BlueCoin = __BlueCoin__;
            ____result.RedCoin = __RedCoin__;
            ____result.Strength = __Strength__;
            ____result.Spirit = __Spirit__;
            ____result.Power = __Power__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Message
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class RegisterDummyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Message.RegisterDummy>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RegisterDummyFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "code", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("code"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Shared.Message.RegisterDummy value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::Shared.Protocol.ErrCode>().Serialize(ref writer, value.code, options);
        }

        public global::Shared.Message.RegisterDummy Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __code__ = default(global::Shared.Protocol.ErrCode);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __code__ = formatterResolver.GetFormatterWithVerify<global::Shared.Protocol.ErrCode>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Shared.Message.RegisterDummy();
            ____result.code = __code__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

